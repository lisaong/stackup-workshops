# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_model')
    _model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_model', [dirname(__file__)])
        except ImportError:
            import _model
            return _model
        try:
            _mod = imp.load_module('_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _model = swig_import_helper()
    del swig_import_helper
else:
    import _model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _model.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _model.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _model.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _model.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _model.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _model.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _model.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _model.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _model.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _model.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _model.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _model.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _model.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


import numpy as np

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(DoubleVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _model.DoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector___bool__(self)


    def __len__(self) -> "std::vector< double >::size_type":
        """
        __len__(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector___len__(self)


    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        """
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _model.DoubleVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _model.DoubleVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        """
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _model.DoubleVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.DoubleVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _model.DoubleVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector___setitem__(self, *args)


    def pop(self) -> "std::vector< double >::value_type":
        """
        pop(DoubleVector self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _model.DoubleVector_pop(self)


    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        """
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector_empty(self)


    def size(self) -> "std::vector< double >::size_type":
        """
        size(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector_size(self)


    def swap(self, v: 'DoubleVector') -> "void":
        """
        swap(DoubleVector self, DoubleVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _model.DoubleVector_swap(self, v)


    def begin(self) -> "std::vector< double >::iterator":
        """
        begin(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _model.DoubleVector_begin(self)


    def end(self) -> "std::vector< double >::iterator":
        """
        end(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _model.DoubleVector_end(self)


    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        """
        rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _model.DoubleVector_rbegin(self)


    def rend(self) -> "std::vector< double >::reverse_iterator":
        """
        rend(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _model.DoubleVector_rend(self)


    def clear(self) -> "void":
        """
        clear(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _model.DoubleVector_clear(self)


    def get_allocator(self) -> "std::vector< double >::allocator_type":
        """
        get_allocator(DoubleVector self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _model.DoubleVector_pop_back(self)


    def erase(self, *args) -> "std::vector< double >::iterator":
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _model.DoubleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        this = _model.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        """
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_push_back(self, x)


    def front(self) -> "std::vector< double >::value_type const &":
        """
        front(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector_front(self)


    def back(self) -> "std::vector< double >::value_type const &":
        """
        back(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector_back(self)


    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        """
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_insert(self, *args)


    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        """
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _model.DoubleVector_reserve(self, n)


    def capacity(self) -> "std::vector< double >::size_type":
        """
        capacity(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _model.DoubleVector_capacity(self)


    def __array__(self):
        """Enable access to this data as a numpy array, via np.asarray(v) """
        type_name = "double"
        s = len(self)
        if type_name == "float":
            a = np.ndarray(shape=(s,), dtype=np.float32)
        elif type_name == "double":
            a = np.ndarray(shape=(s,), dtype=np.float)
        else:
            raise Exception("Expecting float or double type")
        copy_to_buffer_double(self, a)
        return a

    def copy_from(self, a):
        """Enable buffer copy from given numpy array """
        copy_from_buffer_double(self, a)

    __swig_destroy__ = _model.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _model.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(_object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(DoubleVectorVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _model.DoubleVectorVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(DoubleVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(DoubleVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector___bool__(self)


    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        """
        __len__(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        """
        __getslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> DoubleVectorVector

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _model.DoubleVectorVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        __setslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, DoubleVectorVector v)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        """
        return _model.DoubleVectorVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "void":
        """
        __delslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _model.DoubleVectorVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        __delitem__(DoubleVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.DoubleVectorVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        """
        __getitem__(DoubleVectorVector self, PySliceObject * slice) -> DoubleVectorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i) -> DoubleVector

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        """
        return _model.DoubleVectorVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(DoubleVectorVector self, PySliceObject * slice, DoubleVectorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        __setitem__(DoubleVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, DoubleVector x)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        """
        pop(DoubleVectorVector self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _model.DoubleVectorVector_pop(self)


    def append(self, x: 'DoubleVector') -> "void":
        """
        append(DoubleVectorVector self, DoubleVector x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(DoubleVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector_empty(self)


    def size(self) -> "std::vector< std::vector< double > >::size_type":
        """
        size(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector_size(self)


    def swap(self, v: 'DoubleVectorVector') -> "void":
        """
        swap(DoubleVectorVector self, DoubleVectorVector v)

        Parameters
        ----------
        v: std::vector< std::vector< double,std::allocator< double > > > &

        """
        return _model.DoubleVectorVector_swap(self, v)


    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        """
        begin(DoubleVectorVector self) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _model.DoubleVectorVector_begin(self)


    def end(self) -> "std::vector< std::vector< double > >::iterator":
        """
        end(DoubleVectorVector self) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _model.DoubleVectorVector_end(self)


    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        """
        rbegin(DoubleVectorVector self) -> std::vector< std::vector< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _model.DoubleVectorVector_rbegin(self)


    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        """
        rend(DoubleVectorVector self) -> std::vector< std::vector< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _model.DoubleVectorVector_rend(self)


    def clear(self) -> "void":
        """
        clear(DoubleVectorVector self)

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _model.DoubleVectorVector_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        """
        get_allocator(DoubleVectorVector self) -> std::vector< std::vector< double > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(DoubleVectorVector self)

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _model.DoubleVectorVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        """
        erase(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator

        erase(DoubleVectorVector self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< double > >::iterator
        last: std::vector< std::vector< double > >::iterator

        """
        return _model.DoubleVectorVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> DoubleVectorVector
        __init__(std::vector<(std::vector<(double)>)> self, DoubleVectorVector arg2) -> DoubleVectorVector

        Parameters
        ----------
        arg2: std::vector< std::vector< double,std::allocator< double > > > const &

        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> DoubleVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type

        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, DoubleVector value) -> DoubleVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type
        value: std::vector< std::vector< double > >::value_type const &

        """
        this = _model.new_DoubleVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'DoubleVector') -> "void":
        """
        push_back(DoubleVectorVector self, DoubleVector x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_push_back(self, x)


    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        """
        front(DoubleVectorVector self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector_front(self)


    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        """
        back(DoubleVectorVector self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector_back(self)


    def assign(self, n: 'std::vector< std::vector< double > >::size_type', x: 'DoubleVector') -> "void":
        """
        assign(DoubleVectorVector self, std::vector< std::vector< double > >::size_type n, DoubleVector x)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(DoubleVectorVector self, std::vector< std::vector< double > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type

        resize(DoubleVectorVector self, std::vector< std::vector< double > >::size_type new_size, DoubleVector x)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos, DoubleVector x) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        x: std::vector< std::vector< double > >::value_type const &

        insert(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, DoubleVector x)

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< double > >::size_type') -> "void":
        """
        reserve(DoubleVectorVector self, std::vector< std::vector< double > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type

        """
        return _model.DoubleVectorVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        """
        capacity(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _model.DoubleVectorVector_capacity(self)

    __swig_destroy__ = _model.delete_DoubleVectorVector
    __del__ = lambda self: None
DoubleVectorVector_swigregister = _model.DoubleVectorVector_swigregister
DoubleVectorVector_swigregister(DoubleVectorVector)

class FloatVector(_object):
    """Proxy of C++ std::vector<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(FloatVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _model.FloatVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(FloatVector self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(FloatVector self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector___bool__(self)


    def __len__(self) -> "std::vector< float >::size_type":
        """
        __len__(FloatVector self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector___len__(self)


    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        """
        __getslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> FloatVector

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _model.FloatVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, FloatVector v)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type
        v: std::vector< float,std::allocator< float > > const &

        """
        return _model.FloatVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        """
        __delslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _model.FloatVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(FloatVector self, std::vector< float >::difference_type i)

        Parameters
        ----------
        i: std::vector< float >::difference_type

        __delitem__(FloatVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.FloatVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        """
        __getitem__(FloatVector self, PySliceObject * slice) -> FloatVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(FloatVector self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &

        Parameters
        ----------
        i: std::vector< float >::difference_type

        """
        return _model.FloatVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(FloatVector self, PySliceObject * slice, FloatVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< float,std::allocator< float > > const &

        __setitem__(FloatVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector___setitem__(self, *args)


    def pop(self) -> "std::vector< float >::value_type":
        """
        pop(FloatVector self) -> std::vector< float >::value_type

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _model.FloatVector_pop(self)


    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        """
        append(FloatVector self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(FloatVector self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector_empty(self)


    def size(self) -> "std::vector< float >::size_type":
        """
        size(FloatVector self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector_size(self)


    def swap(self, v: 'FloatVector') -> "void":
        """
        swap(FloatVector self, FloatVector v)

        Parameters
        ----------
        v: std::vector< float > &

        """
        return _model.FloatVector_swap(self, v)


    def begin(self) -> "std::vector< float >::iterator":
        """
        begin(FloatVector self) -> std::vector< float >::iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _model.FloatVector_begin(self)


    def end(self) -> "std::vector< float >::iterator":
        """
        end(FloatVector self) -> std::vector< float >::iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _model.FloatVector_end(self)


    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        """
        rbegin(FloatVector self) -> std::vector< float >::reverse_iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _model.FloatVector_rbegin(self)


    def rend(self) -> "std::vector< float >::reverse_iterator":
        """
        rend(FloatVector self) -> std::vector< float >::reverse_iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _model.FloatVector_rend(self)


    def clear(self) -> "void":
        """
        clear(FloatVector self)

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _model.FloatVector_clear(self)


    def get_allocator(self) -> "std::vector< float >::allocator_type":
        """
        get_allocator(FloatVector self) -> std::vector< float >::allocator_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(FloatVector self)

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _model.FloatVector_pop_back(self)


    def erase(self, *args) -> "std::vector< float >::iterator":
        """
        erase(FloatVector self, std::vector< float >::iterator pos) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator

        erase(FloatVector self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator

        Parameters
        ----------
        first: std::vector< float >::iterator
        last: std::vector< float >::iterator

        """
        return _model.FloatVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(float)> self) -> FloatVector
        __init__(std::vector<(float)> self, FloatVector arg2) -> FloatVector

        Parameters
        ----------
        arg2: std::vector< float > const &

        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type

        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type
        value: std::vector< float >::value_type const &

        """
        this = _model.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        """
        push_back(FloatVector self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_push_back(self, x)


    def front(self) -> "std::vector< float >::value_type const &":
        """
        front(FloatVector self) -> std::vector< float >::value_type const &

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector_front(self)


    def back(self) -> "std::vector< float >::value_type const &":
        """
        back(FloatVector self) -> std::vector< float >::value_type const &

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector_back(self)


    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        """
        assign(FloatVector self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(FloatVector self, std::vector< float >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< float >::size_type

        resize(FloatVector self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator
        x: std::vector< float >::value_type const &

        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< float >::iterator
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_insert(self, *args)


    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        """
        reserve(FloatVector self, std::vector< float >::size_type n)

        Parameters
        ----------
        n: std::vector< float >::size_type

        """
        return _model.FloatVector_reserve(self, n)


    def capacity(self) -> "std::vector< float >::size_type":
        """
        capacity(FloatVector self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _model.FloatVector_capacity(self)


    def __array__(self):
        """Enable access to this data as a numpy array, via np.asarray(v) """
        type_name = "float"
        s = len(self)
        if type_name == "float":
            a = np.ndarray(shape=(s,), dtype=np.float32)
        elif type_name == "double":
            a = np.ndarray(shape=(s,), dtype=np.float)
        else:
            raise Exception("Expecting float or double type")
        copy_to_buffer_float(self, a)
        return a

    def copy_from(self, a):
        """Enable buffer copy from given numpy array """
        copy_from_buffer_float(self, a)

    __swig_destroy__ = _model.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _model.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatVectorVector(_object):
    """Proxy of C++ std::vector<(std::vector<(float)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(FloatVectorVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _model.FloatVectorVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(FloatVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(FloatVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector___bool__(self)


    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        """
        __len__(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< float > >::difference_type', j: 'std::vector< std::vector< float > >::difference_type') -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        """
        __getslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j) -> FloatVectorVector

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        """
        return _model.FloatVectorVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        __setslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j, FloatVectorVector v)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type
        v: std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &

        """
        return _model.FloatVectorVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< float > >::difference_type', j: 'std::vector< std::vector< float > >::difference_type') -> "void":
        """
        __delslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        """
        return _model.FloatVectorVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type

        __delitem__(FloatVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.FloatVectorVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        """
        __getitem__(FloatVectorVector self, PySliceObject * slice) -> FloatVectorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i) -> FloatVector

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type

        """
        return _model.FloatVectorVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(FloatVectorVector self, PySliceObject * slice, FloatVectorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &

        __setitem__(FloatVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, FloatVector x)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        """
        pop(FloatVectorVector self) -> FloatVector

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _model.FloatVectorVector_pop(self)


    def append(self, x: 'FloatVector') -> "void":
        """
        append(FloatVectorVector self, FloatVector x)

        Parameters
        ----------
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(FloatVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector_empty(self)


    def size(self) -> "std::vector< std::vector< float > >::size_type":
        """
        size(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector_size(self)


    def swap(self, v: 'FloatVectorVector') -> "void":
        """
        swap(FloatVectorVector self, FloatVectorVector v)

        Parameters
        ----------
        v: std::vector< std::vector< float,std::allocator< float > > > &

        """
        return _model.FloatVectorVector_swap(self, v)


    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        """
        begin(FloatVectorVector self) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _model.FloatVectorVector_begin(self)


    def end(self) -> "std::vector< std::vector< float > >::iterator":
        """
        end(FloatVectorVector self) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _model.FloatVectorVector_end(self)


    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        """
        rbegin(FloatVectorVector self) -> std::vector< std::vector< float > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _model.FloatVectorVector_rbegin(self)


    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        """
        rend(FloatVectorVector self) -> std::vector< std::vector< float > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _model.FloatVectorVector_rend(self)


    def clear(self) -> "void":
        """
        clear(FloatVectorVector self)

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _model.FloatVectorVector_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        """
        get_allocator(FloatVectorVector self) -> std::vector< std::vector< float > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(FloatVectorVector self)

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _model.FloatVectorVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        """
        erase(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator

        erase(FloatVectorVector self, std::vector< std::vector< float > >::iterator first, std::vector< std::vector< float > >::iterator last) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< float > >::iterator
        last: std::vector< std::vector< float > >::iterator

        """
        return _model.FloatVectorVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(float)>)> self) -> FloatVectorVector
        __init__(std::vector<(std::vector<(float)>)> self, FloatVectorVector arg2) -> FloatVectorVector

        Parameters
        ----------
        arg2: std::vector< std::vector< float,std::allocator< float > > > const &

        __init__(std::vector<(std::vector<(float)>)> self, std::vector< std::vector< float > >::size_type size) -> FloatVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< float > >::size_type

        __init__(std::vector<(std::vector<(float)>)> self, std::vector< std::vector< float > >::size_type size, FloatVector value) -> FloatVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< float > >::size_type
        value: std::vector< std::vector< float > >::value_type const &

        """
        this = _model.new_FloatVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'FloatVector') -> "void":
        """
        push_back(FloatVectorVector self, FloatVector x)

        Parameters
        ----------
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_push_back(self, x)


    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        """
        front(FloatVectorVector self) -> FloatVector

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector_front(self)


    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        """
        back(FloatVectorVector self) -> FloatVector

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector_back(self)


    def assign(self, n: 'std::vector< std::vector< float > >::size_type', x: 'FloatVector') -> "void":
        """
        assign(FloatVectorVector self, std::vector< std::vector< float > >::size_type n, FloatVector x)

        Parameters
        ----------
        n: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(FloatVectorVector self, std::vector< std::vector< float > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< float > >::size_type

        resize(FloatVectorVector self, std::vector< std::vector< float > >::size_type new_size, FloatVector x)

        Parameters
        ----------
        new_size: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos, FloatVector x) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator
        x: std::vector< std::vector< float > >::value_type const &

        insert(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos, std::vector< std::vector< float > >::size_type n, FloatVector x)

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator
        n: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< float > >::size_type') -> "void":
        """
        reserve(FloatVectorVector self, std::vector< std::vector< float > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< float > >::size_type

        """
        return _model.FloatVectorVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        """
        capacity(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _model.FloatVectorVector_capacity(self)

    __swig_destroy__ = _model.delete_FloatVectorVector
    __del__ = lambda self: None
FloatVectorVector_swigregister = _model.FloatVectorVector_swigregister
FloatVectorVector_swigregister(FloatVectorVector)

class StringVector(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(StringVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _model.StringVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector___bool__(self)


    def __len__(self) -> "std::vector< std::string >::size_type":
        """
        __len__(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        """
        __getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _model.StringVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _model.StringVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        """
        __delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _model.StringVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.StringVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        """
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _model.StringVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::string >::value_type":
        """
        pop(StringVector self) -> std::vector< std::string >::value_type

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _model.StringVector_pop(self)


    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        """
        append(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector_empty(self)


    def size(self) -> "std::vector< std::string >::size_type":
        """
        size(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector_size(self)


    def swap(self, v: 'StringVector') -> "void":
        """
        swap(StringVector self, StringVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _model.StringVector_swap(self, v)


    def begin(self) -> "std::vector< std::string >::iterator":
        """
        begin(StringVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _model.StringVector_begin(self)


    def end(self) -> "std::vector< std::string >::iterator":
        """
        end(StringVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _model.StringVector_end(self)


    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        """
        rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _model.StringVector_rbegin(self)


    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        """
        rend(StringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _model.StringVector_rend(self)


    def clear(self) -> "void":
        """
        clear(StringVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _model.StringVector_clear(self)


    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        """
        get_allocator(StringVector self) -> std::vector< std::string >::allocator_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(StringVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _model.StringVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::string >::iterator":
        """
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _model.StringVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> StringVector
        __init__(std::vector<(std::string)> self, StringVector arg2) -> StringVector

        Parameters
        ----------
        arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        this = _model.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        """
        push_back(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_push_back(self, x)


    def front(self) -> "std::vector< std::string >::value_type const &":
        """
        front(StringVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector_front(self)


    def back(self) -> "std::vector< std::string >::value_type const &":
        """
        back(StringVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector_back(self)


    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        """
        assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(StringVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        """
        reserve(StringVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _model.StringVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::string >::size_type":
        """
        capacity(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _model.StringVector_capacity(self)

    __swig_destroy__ = _model.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _model.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(IntVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _model.IntVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(IntVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(IntVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector___bool__(self)


    def __len__(self) -> "std::vector< int >::size_type":
        """
        __len__(IntVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector___len__(self)


    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        """
        __getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _model.IntVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _model.IntVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        """
        __delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _model.IntVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(IntVector self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.IntVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        """
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _model.IntVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector___setitem__(self, *args)


    def pop(self) -> "std::vector< int >::value_type":
        """
        pop(IntVector self) -> std::vector< int >::value_type

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _model.IntVector_pop(self)


    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        """
        append(IntVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(IntVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector_empty(self)


    def size(self) -> "std::vector< int >::size_type":
        """
        size(IntVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector_size(self)


    def swap(self, v: 'IntVector') -> "void":
        """
        swap(IntVector self, IntVector v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _model.IntVector_swap(self, v)


    def begin(self) -> "std::vector< int >::iterator":
        """
        begin(IntVector self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _model.IntVector_begin(self)


    def end(self) -> "std::vector< int >::iterator":
        """
        end(IntVector self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _model.IntVector_end(self)


    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        """
        rbegin(IntVector self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _model.IntVector_rbegin(self)


    def rend(self) -> "std::vector< int >::reverse_iterator":
        """
        rend(IntVector self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _model.IntVector_rend(self)


    def clear(self) -> "void":
        """
        clear(IntVector self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _model.IntVector_clear(self)


    def get_allocator(self) -> "std::vector< int >::allocator_type":
        """
        get_allocator(IntVector self) -> std::vector< int >::allocator_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(IntVector self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _model.IntVector_pop_back(self)


    def erase(self, *args) -> "std::vector< int >::iterator":
        """
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _model.IntVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> IntVector
        __init__(std::vector<(int)> self, IntVector arg2) -> IntVector

        Parameters
        ----------
        arg2: std::vector< int > const &

        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        this = _model.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        """
        push_back(IntVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_push_back(self, x)


    def front(self) -> "std::vector< int >::value_type const &":
        """
        front(IntVector self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector_front(self)


    def back(self) -> "std::vector< int >::value_type const &":
        """
        back(IntVector self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector_back(self)


    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        """
        assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(IntVector self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_insert(self, *args)


    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        """
        reserve(IntVector self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _model.IntVector_reserve(self, n)


    def capacity(self) -> "std::vector< int >::size_type":
        """
        capacity(IntVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _model.IntVector_capacity(self)


    def __array__(self):
        """Enable access to this data as a numpy array, via np.asarray(v) """
        type_name = "int"
        s = len(self)
        if type_name == "float":
            a = np.ndarray(shape=(s,), dtype=np.float32)
        elif type_name == "double":
            a = np.ndarray(shape=(s,), dtype=np.float)
        else:
            raise Exception("Expecting float or double type")
        copy_to_buffer_int(self, a)
        return a

    def copy_from(self, a):
        """Enable buffer copy from given numpy array """
        copy_from_buffer_int(self, a)

    __swig_destroy__ = _model.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _model.IntVector_swigregister
IntVector_swigregister(IntVector)


class FloatVector(FloatVector):
    def __init__(self, numpyArray = None):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
#since this is a vector, we can always ravel it.
            super(FloatVector, self).__init__()
            self.copy_from(numpyArray.ravel().astype(np.float32))
        elif numpyArray:
#fallback to non-numpy construction
            super(FloatVector, self).__init__(numpyArray)
        else:
            super(FloatVector, self).__init__()



class DoubleVector(DoubleVector):
    def __init__(self, numpyArray = None):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
#since this is a vector, we can always ravel it.
            super(DoubleVector, self).__init__()
            self.copy_from(numpyArray.ravel().astype(np.float))
        elif numpyArray:
#fallback to non-numpy construction
            super(DoubleVector, self).__init__(numpyArray)
        else:
            super(DoubleVector, self).__init__()



class IntVector(IntVector):
    def __init__(self, numpyArray = None):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
#since this is a vector, we can always ravel it.
            super(IntVector, self).__init__()
            self.copy_from(numpyArray.ravel().astype(np.int))
        elif numpyArray:
#fallback to non-numpy construction
            super(IntVector, self).__init__(numpyArray)
        else:
            super(IntVector, self).__init__()



def copy_to_buffer_double(field: 'DoubleVector', buffer: 'double *') -> "void":
    """
    copy_to_buffer_double(DoubleVector field, double * buffer)

    Parameters
    ----------
    field: std::vector< double,std::allocator< double > > const &
    buffer: double *

    """
    return _model.copy_to_buffer_double(field, buffer)

def copy_from_buffer_double(field: 'DoubleVector', buffer: 'double *') -> "void":
    """
    copy_from_buffer_double(DoubleVector field, double * buffer)

    Parameters
    ----------
    field: std::vector< double,std::allocator< double > > &
    buffer: double *

    """
    return _model.copy_from_buffer_double(field, buffer)

def copy_to_buffer_float(field: 'FloatVector', buffer: 'float *') -> "void":
    """
    copy_to_buffer_float(FloatVector field, float * buffer)

    Parameters
    ----------
    field: std::vector< float,std::allocator< float > > const &
    buffer: float *

    """
    return _model.copy_to_buffer_float(field, buffer)

def copy_from_buffer_float(field: 'FloatVector', buffer: 'float *') -> "void":
    """
    copy_from_buffer_float(FloatVector field, float * buffer)

    Parameters
    ----------
    field: std::vector< float,std::allocator< float > > &
    buffer: float *

    """
    return _model.copy_from_buffer_float(field, buffer)

def copy_to_buffer_int(field: 'IntVector', buffer: 'int *') -> "void":
    """
    copy_to_buffer_int(IntVector field, int * buffer)

    Parameters
    ----------
    field: std::vector< int,std::allocator< int > > const &
    buffer: int *

    """
    return _model.copy_to_buffer_int(field, buffer)

def copy_from_buffer_int(field: 'IntVector', buffer: 'int *') -> "void":
    """
    copy_from_buffer_int(IntVector field, int * buffer)

    Parameters
    ----------
    field: std::vector< int,std::allocator< int > > &
    buffer: int *

    """
    return _model.copy_from_buffer_int(field, buffer)
class DoubleCallbackBase(_object):
    """Proxy of C++ ell::api::CallbackBase<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleCallbackBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleCallbackBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(ell::api::CallbackBase<(double)> self) -> DoubleCallbackBase

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == DoubleCallbackBase:
            _self = None
        else:
            _self = self
        this = _model.new_DoubleCallbackBase(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_DoubleCallbackBase
    __del__ = lambda self: None

    def Run(self, *args) -> "bool":
        """
        Run(DoubleCallbackBase self, DoubleVector arg0) -> bool

        Parameters
        ----------
        arg0: std::vector< double,std::allocator< double > > &

        Run(DoubleCallbackBase self, double arg0) -> bool

        Parameters
        ----------
        arg0: double

        """
        return _model.DoubleCallbackBase_Run(self, *args)

    def __disown__(self):
        self.this.disown()
        _model.disown_DoubleCallbackBase(self)
        return weakref_proxy(self)
DoubleCallbackBase_swigregister = _model.DoubleCallbackBase_swigregister
DoubleCallbackBase_swigregister(DoubleCallbackBase)

class DoubleDoubleCallbackForwarder(_object):
    """Proxy of C++ ell::api::CallbackForwarder<(double,double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleDoubleCallbackForwarder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleDoubleCallbackForwarder, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ell::api::CallbackForwarder<(double,double)> self) -> DoubleDoubleCallbackForwarder"""
        this = _model.new_DoubleDoubleCallbackForwarder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_DoubleDoubleCallbackForwarder
    __del__ = lambda self: None

    def InvokeOutput(self, buffer: 'double const *') -> "void":
        """
        InvokeOutput(DoubleDoubleCallbackForwarder self, double const * buffer)

        Parameters
        ----------
        buffer: double const *

        """
        return _model.DoubleDoubleCallbackForwarder_InvokeOutput(self, buffer)


    def Register(self, inputCallback: 'DoubleCallbackBase', inputSize: 'size_t', outputCallback: 'DoubleCallbackBase', outputSize: 'size_t', lagCallback: 'DoubleCallbackBase') -> "void":
        """
        Register(DoubleDoubleCallbackForwarder self, DoubleCallbackBase inputCallback, size_t inputSize, DoubleCallbackBase outputCallback, size_t outputSize, DoubleCallbackBase lagCallback)

        Parameters
        ----------
        inputCallback: ell::api::CallbackBase< double > &
        inputSize: size_t
        outputCallback: ell::api::CallbackBase< double > &
        outputSize: size_t
        lagCallback: ell::api::CallbackBase< ell::api::TimeTickType > &

        """
        return _model.DoubleDoubleCallbackForwarder_Register(self, inputCallback, inputSize, outputCallback, outputSize, lagCallback)


    def Clear(self) -> "void":
        """
        Clear(DoubleDoubleCallbackForwarder self)

        Parameters
        ----------
        self: ell::api::CallbackForwarder< double,double > *

        """
        return _model.DoubleDoubleCallbackForwarder_Clear(self)

DoubleDoubleCallbackForwarder_swigregister = _model.DoubleDoubleCallbackForwarder_swigregister
DoubleDoubleCallbackForwarder_swigregister(DoubleDoubleCallbackForwarder)

class FloatCallbackBase(_object):
    """Proxy of C++ ell::api::CallbackBase<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatCallbackBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatCallbackBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(ell::api::CallbackBase<(float)> self) -> FloatCallbackBase

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == FloatCallbackBase:
            _self = None
        else:
            _self = self
        this = _model.new_FloatCallbackBase(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_FloatCallbackBase
    __del__ = lambda self: None

    def Run(self, *args) -> "bool":
        """
        Run(FloatCallbackBase self, FloatVector arg0) -> bool

        Parameters
        ----------
        arg0: std::vector< float,std::allocator< float > > &

        Run(FloatCallbackBase self, float arg0) -> bool

        Parameters
        ----------
        arg0: float

        """
        return _model.FloatCallbackBase_Run(self, *args)

    def __disown__(self):
        self.this.disown()
        _model.disown_FloatCallbackBase(self)
        return weakref_proxy(self)
FloatCallbackBase_swigregister = _model.FloatCallbackBase_swigregister
FloatCallbackBase_swigregister(FloatCallbackBase)

class FloatFloatCallbackForwarder(_object):
    """Proxy of C++ ell::api::CallbackForwarder<(float,float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatFloatCallbackForwarder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatFloatCallbackForwarder, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ell::api::CallbackForwarder<(float,float)> self) -> FloatFloatCallbackForwarder"""
        this = _model.new_FloatFloatCallbackForwarder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_FloatFloatCallbackForwarder
    __del__ = lambda self: None

    def InvokeOutput(self, buffer: 'float const *') -> "void":
        """
        InvokeOutput(FloatFloatCallbackForwarder self, float const * buffer)

        Parameters
        ----------
        buffer: float const *

        """
        return _model.FloatFloatCallbackForwarder_InvokeOutput(self, buffer)


    def Register(self, inputCallback: 'FloatCallbackBase', inputSize: 'size_t', outputCallback: 'FloatCallbackBase', outputSize: 'size_t', lagCallback: 'DoubleCallbackBase') -> "void":
        """
        Register(FloatFloatCallbackForwarder self, FloatCallbackBase inputCallback, size_t inputSize, FloatCallbackBase outputCallback, size_t outputSize, DoubleCallbackBase lagCallback)

        Parameters
        ----------
        inputCallback: ell::api::CallbackBase< float > &
        inputSize: size_t
        outputCallback: ell::api::CallbackBase< float > &
        outputSize: size_t
        lagCallback: ell::api::CallbackBase< ell::api::TimeTickType > &

        """
        return _model.FloatFloatCallbackForwarder_Register(self, inputCallback, inputSize, outputCallback, outputSize, lagCallback)


    def Clear(self) -> "void":
        """
        Clear(FloatFloatCallbackForwarder self)

        Parameters
        ----------
        self: ell::api::CallbackForwarder< float,float > *

        """
        return _model.FloatFloatCallbackForwarder_Clear(self)

FloatFloatCallbackForwarder_swigregister = _model.FloatFloatCallbackForwarder_swigregister
FloatFloatCallbackForwarder_swigregister(FloatFloatCallbackForwarder)


class InputCallableWrapper(FloatCallbackBase):
    def __init__(self, f):
        super(InputCallableWrapper, self).__init__()
        self.f_ = f
    def Run(self, data):
        return self.f_(data)

class OutputCallableWrapper(FloatCallbackBase):
    def __init__(self, f):
        super(OutputCallableWrapper, self).__init__()
        self.f_ = f
    def Run(self, data):
        self.f_(data)
        return True

class LagCallableWrapper(DoubleCallbackBase):
    def __init__(self, f):
        super(LagCallableWrapper, self).__init__()
        self.f_ = f
    def Run(self, data):
        self.f_(data)
        return True


class Model:
    """Base class that user code derives from to provide callbacks"""
    def __init__(self):

        self.predictor = model_Predictor()

# keep these wrapper objects alive so the model_Predictor C++ code can keep a pointer to them.
        self.input_wrapper = InputCallableWrapper(self._input_callback)
        self.output_wrapper = OutputCallableWrapper(self.output_callback)
        self.lag_wrapper = LagCallableWrapper(self.lag_notification)

        self.predictor.Register(self.input_wrapper,
          get_default_input_shape().Size(),
          self.output_wrapper,
          get_default_output_shape().Size(),
          self.lag_wrapper)

        self.input = FloatVector(get_default_input_shape().Size())
        self.result = FloatVector(get_default_output_shape().Size())

    def _input_callback(self, data: 'FloatVector') -> "bool":
        import numpy as np
        data.copy_from(self.input_callback().astype(np.float32).ravel())
        return True

    def input_callback(self) -> "numpy.ndarray":
        """Derived classes override this to return data as a Numpy array"""
        return None

    def output_callback(self, output: 'FloatVector'):
        """Derived classes override this to receive data as a FloatVector"""
        pass

    def lag_notification(self, lag):
        """Derived classes override this"""
        pass

    def get_step_interval(self) -> "double":
        """Returns the step interval in milliseconds"""
        return model_GetStepInterval()

    def get_lag_threshold(self) -> "double":
        """Returns the lag threshold in milliseconds"""
        return model_GetLagThreshold()

    def time_to_next_interval(self, current_time=0) -> "double":
        """Returns the time to next interval in milliseconds"""
        return model_GetTicksUntilNextInterval(current_time)

    def predict(self, current_time=0):
        """Runs predict with the current time in milliseconds"""
        model_Predict(self.predictor, current_time, self.result)


def predict(inputData: 'numpy.ndarray') -> "numpy.ndarray":
    """Convenience function for calling the model directly without callbacks"""

    class PredictWrapper(Model):
        "Internal class that feeds inputData and receives the result"

        def __init__(self, inputData):
            Model.__init__(self)
            self.input = inputData
            self.results = None

        def input_callback(self) -> "numpy.ndarray":
            "Callback when input is needed"
            return self.input

        def output_callback(self, output: 'FloatVector'):
            "Callback when output is available"
            import numpy as np
            self.results = np.asarray(output)

        def get_results(self) -> "numpy.ndarray":
            "Returns the cached results"
            return self.results

    wrapper = PredictWrapper(inputData)
    wrapper.predict()
    return wrapper.get_results()




def model_Predict(context: 'void *', input: 'double', output: 'FloatVector') -> "void":
    """
    model_Predict(void * context, double input, FloatVector output)

    Parameters
    ----------
    context: void *
    input: double
    output: std::vector< float,std::allocator< float > > &

    """
    return _model.model_Predict(context, input, output)
class model_Predictor(FloatFloatCallbackForwarder):
    """Proxy of C++ model_Predictor class."""

    __swig_setmethods__ = {}
    for _s in [FloatFloatCallbackForwarder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, model_Predictor, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatFloatCallbackForwarder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, model_Predictor, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(model_Predictor self) -> model_Predictor"""
        this = _model.new_model_Predictor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_model_Predictor
    __del__ = lambda self: None
model_Predictor_swigregister = _model.model_Predictor_swigregister
model_Predictor_swigregister(model_Predictor)

class TensorShape(_object):
    """Proxy of C++ ell::api::math::TensorShape class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TensorShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TensorShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rows"] = _model.TensorShape_rows_set
    __swig_getmethods__["rows"] = _model.TensorShape_rows_get
    if _newclass:
        rows = _swig_property(_model.TensorShape_rows_get, _model.TensorShape_rows_set)
    __swig_setmethods__["columns"] = _model.TensorShape_columns_set
    __swig_getmethods__["columns"] = _model.TensorShape_columns_get
    if _newclass:
        columns = _swig_property(_model.TensorShape_columns_get, _model.TensorShape_columns_set)
    __swig_setmethods__["channels"] = _model.TensorShape_channels_set
    __swig_getmethods__["channels"] = _model.TensorShape_channels_get
    if _newclass:
        channels = _swig_property(_model.TensorShape_channels_get, _model.TensorShape_channels_set)

    def Size(self) -> "int":
        """
        Size(TensorShape self) -> int

        Parameters
        ----------
        self: ell::api::math::TensorShape const *

        """
        return _model.TensorShape_Size(self)


    def __init__(self):
        """__init__(ell::api::math::TensorShape self) -> TensorShape"""
        this = _model.new_TensorShape()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_TensorShape
    __del__ = lambda self: None
TensorShape_swigregister = _model.TensorShape_swigregister
TensorShape_swigregister(TensorShape)


def get_default_input_shape() -> "ell::api::math::TensorShape":
    """get_default_input_shape() -> TensorShape"""
    return _model.get_default_input_shape()

def get_default_output_shape() -> "ell::api::math::TensorShape":
    """get_default_output_shape() -> TensorShape"""
    return _model.get_default_output_shape()
# This file is compatible with both classic and new-style classes.


