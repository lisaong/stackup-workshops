<!-- https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr-blazor-webassembly -->
@page "/fetchdata"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Security
@using System.Security.Cryptography.X509Certificates
@using monit_hackernews.Data
@inject NavigationManager NavigationManager
@inject NewsHeadlineFetcher NewsFetcher
@inject IServiceConfiguration AppSettings

<!-- https://docs.microsoft.com/en-us/aspnet/core/blazor/call-javascript-from-dotnet?view=aspnetcore-3.1 -->
@inject IJSRuntime JSRuntime

<h1>Hackernews Top Headlines</h1>

<p>This component demonstrates fetching data using SignalR, refreshing every @AppSettings.ThrottleIntervalMinutes minute(s).</p>

<!--This timestamp is from the server! -->
<p><i>Last event time: @_refreshTime.ToLocalTime().ToString("g") (Local Time).</i></p>

@if (_headlines.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Votes</th>
                <th>Title</th>
                <th>Top Comment</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var headline in _headlines)
            {
                <tr>
                    <td>@headline.dateTime.ToLocalTime().ToString("g")</td>
                    <td><a href="@headline.itemUrl">@headline.score</a></td>
                    <td><a href="@headline.url">@headline.title</a></td>
                    <td>@headline.topComment.text</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection _hubConnection;
    private List<NewsHeadline> _headlines = new List<NewsHeadline>();
    private DateTime _refreshTime = DateTime.Now;
    private TimeSpan _refreshInterval;

    static bool ValidateSslCertificate(
        object sender,
        X509Certificate cert,
        X509Chain certChain,
        SslPolicyErrors policyErrors)
    {
        // Validate the cert here and return true if it's correct.
        // If this is a development app, you could just return true always
        // In production you should ALWAYS either use a trusted cert or check the thumbprint of the cert matches one you expect.
        return true;
    }

    private async Task<string> ClientSideDecodeHtml(string rawHtml)
    {
        return await JSRuntime.InvokeAsync<string>("unescapeHtml", rawHtml);
    }

    // Invoked after component is initialized
    // https://docs.microsoft.com/en-us/aspnet/core/blazor/lifecycle?view=aspnetcore-3.1
    protected override async Task OnInitializedAsync()
    {
        // Initialise headlines the first time we load
        _refreshInterval = new TimeSpan(0, (int)double.Parse(AppSettings.ThrottleIntervalMinutes), 0);

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/newsHub"), options => {
                // Create a handler that accepts custom (untrusted) certificates
                var handler = new HttpClientHandler
                {
                    ClientCertificateOptions = ClientCertificateOption.Manual,
                    ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => 
                    { 
                        return ValidateSslCertificate(sender, cert, chain, sslPolicyErrors); 
                    }
                };

                // Register the custom handler above and also configure WebSockets
                options.HttpMessageHandlerFactory = _ => handler;
                options.WebSocketConfiguration = sockets =>
                {
                    sockets.RemoteCertificateValidationCallback = 
                        new RemoteCertificateValidationCallback(ValidateSslCertificate);
                };
            })
            .Build();

        _hubConnection.On<NewsHeadline>("ReceiveHeadline", async (headline) =>
        {
            if (DateTime.Now.Subtract(_refreshTime) >= _refreshInterval)
            {
                // Reset the list if it was old
                _headlines.Clear();
            }

            headline.topComment.text = await ClientSideDecodeHtml(headline.topComment.text);
            _headlines.Add(headline);

            _refreshTime = DateTime.Now;
            StateHasChanged(); // tell view to re-render
        });

        await _hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _headlines = await NewsFetcher.GetHeadlinesAsync();

            for (int i=0; i<_headlines.Count; i++)
            {
                _headlines[i].topComment.text = await ClientSideDecodeHtml(_headlines[i].topComment.text);
            }

            StateHasChanged(); // tell view to re-render
        }
    }    

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;    
}
